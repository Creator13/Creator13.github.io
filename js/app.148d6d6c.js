(function(e){function t(t){for(var a,i,s=t[0],l=t[1],c=t[2],p=0,d=[];p<s.length;p++)i=s[p],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&d.push(r[i][0]),r[i]=0;for(a in l)Object.prototype.hasOwnProperty.call(l,a)&&(e[a]=l[a]);h&&h(t);while(d.length)d.shift()();return o.push.apply(o,c||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],a=!0,s=1;s<n.length;s++){var l=n[s];0!==r[l]&&(a=!1)}a&&(o.splice(t--,1),e=i(i.s=n[0]))}return e}var a={},r={app:0},o=[];function i(t){if(a[t])return a[t].exports;var n=a[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=a,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)i.d(n,a,function(t){return e[t]}.bind(null,a));return n},i.n=function(e){var t=e&&e.__esModule?function(){return e["default"]}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],l=s.push.bind(s);s.push=t,s=s.slice();for(var c=0;c<s.length;c++)t(s[c]);var h=l;o.push([0,"chunk-vendors"]),n()})({0:function(e,t,n){e.exports=n("cd49")},"00b6":function(e,t,n){"use strict";n("5e6f")},"0b0b":function(e,t,n){"use strict";n("d796")},2186:function(e,t,n){},"22f8":function(e,t,n){},"2e60":function(e,t,n){},"2f74":function(e,t,n){"use strict";n("4f3b")},"38c2":function(e,t,n){"use strict";n("2e60")},"4f3b":function(e,t,n){},"5c0b":function(e,t,n){"use strict";n("9c0c")},"5e6f":function(e,t,n){},9852:function(e,t,n){"use strict";n("22f8")},"9c0c":function(e,t,n){},c904:function(e,t,n){"use strict";n("f257")},cd49:function(e,t,n){"use strict";n.r(t);var a=n("2b0e"),r=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"app"}},[n("header",{},[n("h1",{staticClass:"site-header",staticStyle:{margin:"0"}},[e._v("Casper van Battum")]),n("h3",[n("a",{attrs:{href:"https://github.com/Creator13",target:"_blank"}},[n("font-awesome-icon",{attrs:{icon:["fab","github"]}})],1),n("a",{attrs:{href:"https://www.instagram.com/cvbattum/",target:"_blank"}},[n("font-awesome-icon",{attrs:{icon:["fab","instagram"]}})],1),n("a",{attrs:{href:"https://unsplash.com/@cvbattum/",target:"_blank"}},[n("font-awesome-icon",{attrs:{icon:["fab","unsplash"]}})],1),n("a",{attrs:{href:"https://www.linkedin.com/in/cvanbattum/",target:"_blank"}},[n("font-awesome-icon",{attrs:{icon:["fab","linkedin"]}})],1)])]),n("div",{staticClass:"page-container horizontal-navigation"},[n("Navigation"),n("transition",{attrs:{name:"fade",mode:"out-in"}},[n("router-view",{attrs:{id:"router-view"}})],1)],1),e._m(0)])},o=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("footer",[e._v(" © Casper van Battum 2024 • "),n("a",{attrs:{href:"https://github.com/Creator13/cvanbattum.com",target:"_blank"}},[e._v("View website source code")])])}],i=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("nav",{attrs:{id:"nav"}},[n("router-link",{attrs:{to:"/"}},[e._v("About")]),n("router-link",{attrs:{to:"/projects"}},[e._v("Projects")])],1)},s=[],l=a["a"].extend({name:"Navigation",props:["layout"]}),c=l,h=n("2877"),p=Object(h["a"])(c,i,s,!1,null,"24150712",null),d=p.exports,u=a["a"].extend({name:"App",components:{Navigation:d}}),m=u,g=(n("5c0b"),n("0b0b"),Object(h["a"])(m,r,o,!1,null,"9663bebe",null)),f=g.exports,w=n("8c4f"),b=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},y=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"home"},[n("main",[n("h2",[e._v("I'm a Netherlands-based programmer, game developer and photographer.")])]),n("div",{staticClass:"splash-image"})])}],v=a["a"].extend({name:"AboutView"}),k=v,j=(n("00b6"),Object(h["a"])(k,b,y,!1,null,"3c005ab2",null)),I=j.exports,x=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"project-view"},[n("header",{staticClass:"splash-container"},[n("div",{staticClass:"splash-image",style:{backgroundImage:"url(../"+e.project.splash+")"}}),n("router-link",{staticClass:"breadcrumb-link button",attrs:{to:"/projects"}},[n("font-awesome-icon",{attrs:{icon:["far","arrow-alt-circle-left"]}}),e._v(" Projects ")],1),n("div",{staticClass:"project-title"},[n("h1",[e._v(e._s(e.project.name))]),n("h5",[e._v(e._s(e.project.year)+" | "),n("span",[e._l(e.project.techs,(function(t,n){return[e._v(" "+e._s(t)),n<e.project.techs.length-1?[e._v(" • ")]:e._e()]}))],2)])])],1),n("div",{staticClass:"markdown",domProps:{innerHTML:e._s(e.renderedContent)}})])},_=[];const T=[{name:"Mimont",slug:"mimont",thumbnailUri:"project_content/mimont/thumb.png",splash:"project_content/mimont/splash.jpg",content:"",shortDescription:"Interactive experience exploring the act of kissing.",year:2020,tags:["unity","networking","experience","emotional","csharp","hku"],techs:["Unity 2019.3","UDP networking","C#"],isFavorite:!0},{name:"The Social Grip",slug:"social-grip",thumbnailUri:"project_content/social-grip/thumb.png",splash:"project_content/social-grip/splash.jpg",content:"",shortDescription:"Challenging grid-based stealth game.",year:2023,tags:[],techs:["Unity 2022.2","C#","Grid-based","Pathfinding"],isFavorite:!0},{name:"Mapsnap",slug:"mapsnap",thumbnailUri:"project_content/mapsnap/thumb.gif",splash:"project_content/mapsnap/splash.png",content:"",shortDescription:"A command line tool to create snapshots and timelapses of OpenStreetMap.",year:"2021-",tags:["c-sharp","openstreetmap","osm","dotnet","image-processing","cli"],techs:["C#",".NET 6.0","OpenStreetMap","CLI"],isFavorite:!0},{name:"Where is Fluffy?",slug:"fluffy",thumbnailUri:"project_content/fluffy/thumb.jpg",splash:"project_content/fluffy/thumb.jpg",content:"",shortDescription:"Interactive story about a young child overcoming their fear.",year:2021,tags:["unity","dialogue","entertainment","storytelling","c-sharp","hku"],techs:["Unity 2021.1","Yarn Spinner","C#"],isFavorite:!0},{name:"Connect for Coffee",slug:"connect-for-coffee",thumbnailUri:"project_content/connect-for-coffee/thumb.png",splash:"project_content/connect-for-coffee/logo_notext.svg",content:"",shortDescription:"Meet strangers while searching for WiFi.",year:2019,tags:["interaction","web","nodejs","emotional","humanity","social","hku"],techs:["Node.js","Websockets","Raspberry Pi","WiFi"],isFavorite:!0},{name:"Lunar Lander",slug:"lunar-lander",thumbnailUri:"project_content/lunar-lander/thumb.png",splash:"project_content/lunar-lander/thumb.png",content:"",shortDescription:"OpenGL clone of the classic arcade game",year:2023,tags:["c++","opengl"],techs:["C++","OpenGL","SDL2"]},{name:"Graduation",slug:"graduation",thumbnailUri:"project_content/graduation/thumb.png",splash:"project_content/graduation/splash.jpg",content:"",shortDescription:"Graduation project at HKU",year:2024,tags:["c++","simulation"],techs:["Game design","C++","ECS"],hidden:!0},{name:"Digital Treasure Chest",slug:"treasure-chest",thumbnailUri:"project_content/treasure-chest/thumb.jpg",splash:"project_content/treasure-chest/splash.jpg",content:"",shortDescription:"Custom-built chest that opens with a unique, digital code.",year:2018,tags:["arduino","c++","hardware","hku"],techs:["Arduino","C/C++","Electronics","Wood & metalworking"],isFavorite:!0},{name:"Portfolio website",slug:"portfolio",thumbnailUri:"project_content/portfolio/thumb.jpg",splash:"project_content/portfolio/splash.jpg",content:"",shortDescription:"The tech behind this website.",year:"2021-",tags:["web","typescript","node-js","vue"],techs:["Typescript","Vue","Node.js","Markdown"]},{name:"AI heightmap generator",slug:"heightmap-gen",thumbnailUri:"project_content/heightmap-gen/imgen4.jpg",splash:"project_content/heightmap-gen/heightmap-unity.jpg",content:"",shortDescription:"Adapting a neural network to generate heightmaps.",year:"2022",tags:["ai","dcgan","python"],techs:["AI","Python","PyTorch"]},{name:"Procedural tree generator",slug:"tree-generator",thumbnailUri:"project_content/tree-gen/thumb.png",splash:"project_content/tree-gen/thumb.png",content:"",shortDescription:"Low-poly tree mesh generator in Unity.",year:2020,tags:["unity","3d modeling","procedural","c-sharp","hku"],techs:["Unity 2019","C#"]},{name:"The Journalist",slug:"the-journalist",thumbnailUri:"project_content/journalist/webapp.jpg",splash:"project_content/journalist/splash.png",content:"",shortDescription:"Classroom web app to help teach students about ethics in journalism.",year:"2020-2021",tags:["web","typescript","node-js","database","full-stack"],techs:["Webapp","Vue","Node.js","MongoDB"]},{name:"Shaders in MonoGame",slug:"graphprog",thumbnailUri:"project_content/graphprog/thumb.jpg",splash:"project_content/graphprog/splash.jpg",content:"",shortDescription:"OpenGL shader programming.",year:2021,tags:["arduino","c++","hardware","hku"],techs:["C#","MonoGame","OpenGL","HLSL"]},{name:"Cliffside cave",slug:"cliffside-cave",thumbnailUri:"project_content/envmod/thumb.jpg",splash:"project_content/envmod/splash.jpg",content:"",shortDescription:"A small cave, hidden away and forgotten...",year:2020,tags:["3d modeling","environment","storytelling","hku"],techs:["Substance Painter","Blender","Unity HDRP"]},{name:"Basic Networking",slug:"basic-networking",thumbnailUri:"project_content/basic-networking/thumb.png",splash:"project_content/basic-networking/thumb.png",content:"",shortDescription:"Server-client UDP networking with the Unity Transport API.",year:2021,tags:["unity","csharp","networking"],techs:["Unity","C#","UDP Networking"]},{name:"Building Analyzer",slug:"buildings-osm",thumbnailUri:"project_content/buildings-osm/splash.png",splash:"project_content/buildings-osm/splash.png",content:"",shortDescription:"Node.js tool to help track progress mapping a town on OpenStreetMap",year:2020,tags:["nodejs","javascript","openstreetmap","cli"],techs:["Node.js","OverPass API","OpenStreetMap"]}];var C=T,P="*Where is Fluffy* is a short game made as an exercise in interactive narrative design. Its story revolves around Robin, who wakes up scared in the middle of the night and can't find their stuffed animal to comfort them. You embark on a nightly adventure to find him...{.intro}\r\n\r\nThe focus of this two-week course in interactive narrative design at the HKU was to create was to create an **interactive storytelling experience**. Out of the many different ways to create an experience like that, we chose the form of a game with **branching dialogue** and **different possible endings** based on player choices.\r\n\r\n![Fluffy scene](/project_content/fluffy/screen_room.jpg){.no-shadow}\r\n\r\n## Creating a platform for **collaborative branching dialogue**\r\nMy biggest challenge creating this game was to implement a system that allowed my teammates, some of whom had never coded or used Unity before, to contribute to the dialogue in a comprehensive way. In previous projects, I had made a graph-based dialogue editor with xNode, but those projects would quickly become exponentially more unmanageable the more conversations were involved. It would also have taken a significant time to set up.\r\n\r\n![Fluffy scene](/project_content/fluffy/screen_fort.jpg){.no-shadow}\r\n\r\n### Yarn Spinner to the rescue\r\nThrough a bit of research, I ended up at these amazing talks on how [Firewatch](https://www.youtube.com/watch?v=RVFyRV43Ei8&) and [Night in the Woods](https://www.youtube.com/watch?v=Qsiu-zzDYww) manage their extensive. Although a world like Firewatch's was slightly out of our scope, the solution offered by Night in the Woods sounded very interesting. On top of that, their solution called [**Yarn Spinner**](https://yarnspinner.dev/) was open source! It turned out that, combined with the also available Yarn Spinner Unity extension, it was surprisingly easy to set up without sacrificing much flexibility.\r\n\r\n### Story editing with Yarn\r\nThe power of Yarn Spinner lies in the highly configurable Yarn files. On top of containing our dialogue, I could leverage the power of **commands** and **variables** to manage a large part of the story progress. I implemented commands to trigger actions in the game (showing an item to the player for example) and record player choices. These commands then got captured by the dialogue runner where I could write handler functions and change the game's state based upon the commands. And the best part was that editing the files was easy enough for everyone to contribute when I had my hands full programming!\r\n\r\n![Yarn file](/project_content/fluffy/screen_yarn2.png){.no-shadow}\r\n\r\n## Editor tools for **player agency**\r\nTo improve the players' engagement with the story, we gave them more agency by giving them the choice of what Fluffy looks like. In several dialogue options (see above), the player can choose three properties: a pattern, a color, and an accessory. When Robin finally finds Fluffy, the in-game sprite of the plushy animal will reflect the choices the player made. To save the artists some work, I created a simple tool which mixes the different properties and generates a new sprite. Instead of having to create 27 permutations of Fluffy, one for each option, we only needed 9 images plus a base layer!\r\n\r\n![Mix 'n Match Fluffy](/project_content/fluffy/plushy_mix.gif){.no-shadow}\r\n\r\n## Made in collaboration with\r\n\r\n- [Yasmine Aarts](https://www.instagram.com/paprikaworm/) - Character design & animation\r\n- [Sterre Eijk](https://www.instagram.com/bungley/) - Monster design & animation\r\n- [Simone Abbring](https://www.instagram.com/moonimations/) - Environment design\r\n- [Naomi Aalbers](https://www.instagram.com/aalbersnaomi/) - Dialogue writing\r\n- And special thanks to [Tim de Jongh](https://timthelittlefoxbus.wixsite.com/home) who offered to create a soundtrack for our game!\r\n\r\n[Play on Itch.io!](https://cvbattum.itch.io/fluffy){.external-link}{.game} [Source code on GitHub](https://github.com/Creator13/FluffyGame){.external-link}{.github} {.link-container}",A='*Mimont* is an interactive experience which explores what kissing is supposed. Two players find themselves in a sea container, and they\'re separated by a glass panel. Their goal is to earn points by kissing the glass at the right place, but what happens when they end up kissing at the same spot?{.intro}\r\n\r\nThis physical interactive experience is meant to be deployed at festivals or popular events that attract a wide public.\r\n\r\nAs the dedicated programmer and Unity expert in the team, I focused on structuring the program and getting everything to work the way we wanted it to.\r\n\r\n![Sea container](/project_content/mimont/render2.jpg){.no-shadow}\r\n\r\n## Playtesting during a pandemic\r\nThis project was born during the 2020 covid pandemic. This made playtesting a lot harder for us. By opting to implement the prototype using **UDP networking**, it allowed my team and I to playtest the game more safely, while impacting the user experience as little as possible.\r\n\r\nFor the physical experience, networking is not strictly necessary. We could have made one game instance that rendered to two beamers. But this wouldn\'t cut it for playtesting. Networking allowed us to playtest the game\'s experience through a tablet or a smartphone.\r\n\r\n<div class="video-wrapper"><iframe width="560" height="315" src="https://www.youtube.com/embed/ovXipv-U9Q0" title="YouTube video player" frameborder="0" allow="accelerometer;  clipboard-write; encrypted-media; gyroscope;" allowfullscreen></iframe></div>\r\n\r\n## UDP networking\r\nI implemented networking using the pre-release [Unity Transport package](https://docs.unity3d.com/Packages/com.unity.transport@0.3/manual/index.html) (v0.3), with plenty of support from my teacher and classmates. This package is very bare-bones and requires a lot of boilerplate before it can be used to make a game. In order to make it more usable and *re*usable, I took on the challenge of abstracting this code away. This has served as the basis for my <router-link to="projects/basic-networking">Basic Networking package</router-link>.\r\n\r\n### Program structure\r\nThe game is built on a server-client network model. Each game is hosted on an integrated server, which player 2 can join (currently directly using the IP address of player 1). This allowed me to write custom clients for debugging purposes as well as a single player mode.\r\n\r\n### Networking features\r\n- Fully functioning server-client networking model.\r\n- Local playtesting using phones or tablets.\r\n- Direct IP address connection.\r\n\r\n## The team\r\n- [Job Elfrink](https://www.jobelfrink.nl/)\r\n- [Leon van Oldenborgh](https://p4radigm.itch.io/)\r\n- Me\r\n\r\n[Play on Itch.io](https://p4radigm.itch.io/mimont){.external-link}{.game} [Code on GitHub](https://github.com/Creator13/Mimont){.external-link}{.github} [Design document](https://docs.google.com/document/d/1LVjTTzhnp1LH14JwPJwHEUcqjaw-YE4A5-iJ0DFeMWU/edit?usp=sharing){.external-link}{.file} {.link-container}',S='*#ConnectForCoffee* is a twist on WiFi captive portals, those screens you get when you\'re looking for public WiFi that ask you to login. Connecting the physical space with the digital, *#ConnectForCoffee* will let you play a safe and fun game to meet a random stranger at public waiting areas. {.intro}\r\n\r\nWe designed *#ConnectForCoffee* for public waiting areas, like **train stations** and **airports**. As you\'re searching for a public WiFi network, instead of connecting to the internet, a little game will open and will **connect you to another person** waiting in the same area. Ask the person our **carefully prepared questions** to find out their looks and whereabouts, and if you manage to find each other, you\'ll both be rewarded by a **free cup of coffee** to enjoy **together**!\r\n\r\n<div class="video-wrapper" ><iframe src="https://player.vimeo.com/video/382012948?portrait=0" width="640" height="360" frameborder="0" allow="autoplay; fullscreen; picture-in-picture" allowfullscreen></iframe></div>\r\n\r\n## Hijacking public WiFi\r\nIn order for it to work, we needed to surprise our players with something they didn\'t expect. As they try to connect to a seemingly normal public WiFi network, we wanted to surprise them with our game. In one of the first experiments we performed, we set up a small Arduino with WiFi to emit a network with the same name as the one at the Utrecht train station, and waited for people to connect to it. We asked them to come find us if they did, and against all our expectations we met a few people! \r\n\r\n### Running a custom captive portal on a Raspberry Pi\r\nRaspberry Pis are surprisingly customizable little machines. Leveraging the power of all of Linux, I managed to run a Node.js server that would serve up our Vue webapp and function as a backend game server. Next, I had to configure the Pi to use its WiFi chip to emit a WiFi network instead of connect to one (similar to how a phone creates a WiFi hotspot). Then, using HostAPD, I configured the network to redirect to the locally running Node.js server as a captive portal. It was an incredible experience to create a \'real\' access point out of a simple Raspberry Pi.\r\n\r\n## Side quests: Rapid prototyping\r\nIn the early stages of the development process, driven by our goal to make an experience to connect people, we wanted to experiment with some social games. One day, we brough a rope to Utrecht Central Station and attempted to get random people to participate in a game of tug-of-war.\r\n\r\nIn order to test a game of *who is it* between strangers, we needed a set of random questions and answers to quickly test on people. Creating the entire app with network connectivity was more than unfeasible at this point, but picking all the questions by hand and matching them with answers on the fly would have been a hassle too. Instead **I wrote a Python script** ([link](https://github.com/Creator13/ConnectForCoffee/blob/master/playtesting/src/randomnumbers.py)) that would handle the complex part of the game based on just a list of questions and answers. Running on a single computer, it would generate a question that could be copied over to an online chat app (like WhatsApp), so the game master could have two random players communicate with each other without the two players being aware who the other one is.\r\n\r\n## One page design poster\r\n\r\n![One page design poster](/project_content/connect-for-coffee/onePageDesign.png)\r\n\r\n## Made together with\r\n\r\n- [Daniël Korssen](https://danielkorssen.com/portfolio/all): Front-end programming\r\n- [Leon van Oldenborgh](https://studenthome.hku.nl/~leon.vanoldenborgh/index.html): Experience design & playtesting\r\n- [Kai Calis](https://www.artstation.com/kai-calis): Visual design\r\n- [Luuk Siewers](https://luuksiewers.nl/): Experience design, graphics & branding\r\n- [Amar Ravi](https://www.amarravi.com/): Experience design\r\n- Me: back-end programming, hardware & playtesting support\r\n\r\n\r\n[GitHub repo](https://github.com/Creator13/ConnectForCoffee){.external-link}{.github} {.link-container}',D='Instead of a lock, the Digital Treasure Chest opens by entering a code. Not just any code, you need to enter this one by reaching the exact right pressure on a pressure sensor! As you hit thr right value, you can confirm it with a button and move to the next number in the sequence, until you finally open the box to reach your precious items!{.intro}\r\n\r\nApart from learning to work with **microcontrollers** and **electronics**, I also tried out new skills such as **welding** and **metalworking**. This project was made for the first-year HKU course "If This Then That".\r\n\r\n<div class="video-wrapper"><iframe width="560" height="315" src="https://www.youtube.com/embed/o7wc2ysCQ_0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></div>\r\n\r\n## Driving a 14-segment display\r\nThe chest uses a 14-segment display to communicate the current value with the user. I had been wanting to program these displays for years, and this course proved to be the perfect opportunity for that. In order to drive these displays, I had to write a custom C++ controller. It uses a port expander and bit-encoded values to drive the characters individually.\r\n\r\n[How-to on Instructables](https://www.instructables.com/Digital-Treasure-Chest/){.external-link}{.instructable} [Source code](https://github.com/Creator13/DigitalTreasureChest){.external-link}{.github} {.link-container}',O="Console version of Conway's game of life, written in C++.{.intro}\r\n\r\nI made this simple command-line version of Conway's Game of Life as part of the course *Object-Oriented programming in C++ Advanced*. Part of the assignment was to implement support for different rulesets for cell-based automata. I implemented this using the strategy pattern and a ruleset interface. An optimization could be to not use inheritance so there would be no expensive virtual method calls. \r\n\r\n[Github repo](https://github.com/Creator13/GameOfLife){.external-link}{.github} {.link-container}",U="THis HKU course in Graphics Programming challenged us to program visuals with a minimal framework.{.intro}\r\n\r\nAfter implementing basic **shaders**, **matrix transformations** and post-processing effects such as **FXAA**, I decided to make things a bit easier by creating my own **post-processing stack** that allows you to switch effects on and off on the fly and mix them together. I finally made a very basic **scene manager** that even lets you switch scenes at runtime.\r\n\r\n![](/project_content/graphprog/screen_mountains.jpg)\r\n![](/project_content/graphprog/screen_post.jpg)\r\n\r\n[Github repo](https://github.com/Creator13/GraphicsProgramming){.external-link}{.github} {.link-container}",F="Under the old farmhouse was a cellar, partially built into the ground. It had clearly seen better days, but it looked like it was still regularly used as a storage shed of sorts. The air inside was damp and dusty, but most of all, it was very dark. Only one small window in the side of the wall allowed light to come through.{.intro}\r\n\r\nThis cave-like cellar under a farmhouse was inspired by my own experiences with spaces like this in the French countryside. It challenged me to learn software like Substance Painter and work with lighting in Unity.\r\n\r\nMade for the Environmental Modelling course at the HKU. \r\n\r\n## Screenshots\r\n![Door detail](/project_content/envmod/door.jpg)\r\n![Tools detail](/project_content/envmod/tools.jpg)\r\n![tools_blender](/project_content/envmod/tools_blender.png)\r\n![Trough](/project_content/envmod/trough.jpg)\r\n\r\n[Unity project](https://github.com/Creator13/CliffsideCave){.external-link}{.github} {.link-container}",M="Born out of a fascination with nature and programming, this tree generator lets anyone create stylish, low-poly trees out of nowhere.{.intro}\r\n\r\n## How it works\r\nThe trees are generated from an armature. The armature consists of a stem and a few branches. The stem is created by selecting random points upwards with a maximum deviation of the angle between the world z-axis and the next segment of the stem. \r\n\r\n[Code on GitHub](https://github.com/Creator13/ProceduralTrees){.external-link}{.github} {.link-container}",G="As I was mapping missing buildings the village of Bathurst and surroundings, I started to wonder about the statistics of all the buildings I was placing. I was particularly interested in knowing how many buildings there were of each polygon. Out of this, the building analyzer was born{.intro}\r\n\r\nBesides dynamically counting the buildings in the area, it's possible to save the downloaded data as well as the results into a file, which I could use to track my progress over the months of mapping this village. They can also be nicely visualized. Keeping into account extensibility, the queries can be swapped for different areas or for different users. \r\n\r\n![results](/project_content/buildings-osm/output.png)\r\n\r\n[More on OpenStreetMap](https://www.openstreetmap.org/user/Creator13/diary/394298){.external-link}{.map} [Code on GitHub](https://github.com/Creator13/BuildingAnalyzer){.external-link}{.github} {.link-container}",N="This Unity package is a light high-level server-client networking package, built on top of the preview Unity Transport package. It can directly be used by Unity `MonoBehaviours` to activate multiplayer and networking in games.{.intro}\r\n\r\n[Code on GitHub](https://github.com/Creator13/BasicNetworking){.external-link}{.github} {.link-container}",E="In assignment for the [Dutch Institute for Sound and Vision](https://www.beeldengeluid.nl/) (Beeld & Geluid), we created a classroom experience to teach schoolkids about the process of creating news. {.intro}\r\n\r\nDuring this five-month long project, we explored ways to create an experience that effectively teaches young high school students (12-14yo) about the process of news creation. With the rapid online spread of fake news and information, media literacy is becoming an ever-more important curriculum item in the Netherlands. Our classroom experience aims to lay a solid foundation for navigating the seemingly infinite stream of information that we all have access to.\r\n\r\n## The experience\r\nFrom our early research, we learned that media literacy is not a topic that much of our target audience is actively thinking about. In order to create an effective teaching tool, we decided to design our workshop around the [four-stage competence model](https://en.wikipedia.org/wiki/Four_stages_of_competence). \r\n\r\n### Part 1\r\n\r\nIn the first part of the workshop, we make the students conscious about the process of news creation. The newsroom app is a little game in which the students have to filter through incoming news sources like press releases, calls, and more. _They_ get to decide what is worthy of being published. The workshop teachers are involved by acting out the role of editor-in-chief, and they can personally react to the choices the students make. Incorrect choices could lead to negative, real-world results for example.\r\n\r\n![App screenshot](/project_content/journalist/webapp.jpg)\r\n\r\n### Part 2\r\n\r\nWhere the first part aims to improve consciousness about news creation, the second part teaches competence. After simply learning about the different pitfalls of fake or false news in the first part, the second part will have them apply their newly gained knowledge. We created a simulation of an event that the students will cover in their very own news items. Through augmented reality (powered by tablets), the students will form groups to interview characters with complex narrative trees. Through asking different questions, different students will uncover different parts of the story. After they collected their information, they can use real reporting equipment like cameras, microphones and editing software to create their own audiovisual newsitem. Everyone will get a chance to display theirs to the class, before getting in-character feedback from their editor-in-chief teacher.\r\n\r\n![Newsroom impression](/project_content/journalist/part2.jpg){.no-shadow}\r\n\r\n## Creating a webapp\r\nWhen it became clear we would be creating a distributed game, I gave myself the goal of learning modern web technologies. In particular, I wanted to refresh my knowledge of Node.js and I was very interested in learning TypeScript and some front-end framework. This framework ended up being Vue.\r\n\r\nFor its relatively simple premise, this project was surprisingly complex. With at least three different groups of end users, I had to create three separate interfaces, as well as three different routings behind the scenes. \r\n\r\n### Accessible prototyping\r\n As soon as we were ready to test the webapp, we needed to add and edit relatively large amounts of content quickly. Since I had my hands full with programming, and because the team consisted mostly of non-programmers, I created an interface that would allow the testers to quickly manage the content. It didn't need to be anything impressive in terms of interface design, but it had to be usable and simple enough for everyone to understand.\r\n\r\n![Source management interface](/project_content/journalist/manage.png)\r\n\r\n## The team\r\nMy partners in crime during this project. We all had about an equal hand in the experience design, hence no mention of this role on any person in particular.\r\n\r\n- [Joyce van der Zon](http://jrochel.portfoliobox.me/) - 2D art & visual design\r\n- [Pieter Dieleman](https://nl.linkedin.com/in/pieter-dieleman-b87506a4) - Testing, presentation & client communication\r\n- [Rafaël Lie Kwie](https://dribbble.com/Rulk) - Interface design\r\n- [Nina Durge](https://www.ninadurge.com/) - 2D art & visual design\r\n- [Evangelos Tsakanikas](https://www.linkedin.com/in/evangelos-tsakanikas-04413817a/) - Android app programming in Unity\r\n- [Jaël van Rossum](mailto:jael.vanrossum@student.hku.nl) - Narrative design\r\n- Casper van Battum - Webapp frontend programming & backend programming",W='Mapsnap is a small command line tool to grab images from OpenStreetMap, targeted at mappers and contributors, with the purpose of creating snapshots and timelapses of mapping progress.{.intro}\r\n\r\nAs a frequent contributor to the OpenStreetMap project, I wanted to create timelapses of the areas I was working on. I would simply create screenshots of the map at openstreetmap.org, crop them and stitch them together using some gif editor. This process was as cumbersome as it was unreliable and prone to errors, so I decided to create a tool that would do it for me.\r\n\r\n## Features\r\n- **Snapshot**: Capture any region of the rendered OpenStreetMap slippy map, by entering the boundary coordinates and the zoom level you want to want.\r\n- **Projects**: Store the area you want to capture in a project file, so you can capture a new snapshot of the exact same area each time.\r\n- **Filename customization**: Choose between saving the images with index numbering or with a date format.\r\n\r\n## How does it work?\r\nOpenStreetMap is an ambitious open data project aimed at creating an open map of the entire world. At its core, it is just a very big database containing all the points and shapes and their properties. This is not very interesting to look at yet. The map you see at openstreetmap.org (referred to as the [Slippy Map](https://wiki.openstreetmap.org/wiki/Slippy_Map)) is the result of the one of the many renderers that turn the data into a visually appealing map.\r\n\r\nA map is too big to store in one single image. The solution to that is to chop the whole map up in small pieces called tiles. OpenStreetMap is divided in tiles of 256x256 pixels, and if the web viewer can show these tiles, so can any program with internet access. These tiles are used by mapsnap to create images.\r\n\r\nFor example, this is the link to a tile containing the city of amsterdam: https://tile.openstreetmap.org/13/4207/2692.png. And here is the tile directly embedded into this website: ![](https://b.tile.openstreetmap.org/13/4207/2692.png){.no-shadow}{.auto-width}\r\n\r\nDue to the open nature of OpenStreetMap, the tile servers are freely accessible to anyone. The wiki has a [page](https://wiki.openstreetmap.org/wiki/Slippy_map_tilenames) listing all the technical details on how to access these servers and get the exact tiles you want. It comes down to converting GPS coordinates into the x and y coordinates of the tile that contains those coordinates, and turning that into a link. \r\n\r\nIn mapsnap, you need to provide two coordinate pairs, i.e. two points on the map. Those coordinates get turned into links to tiles, as well as every single tile in a rectangle between those points. All these tiles then get downloaded to the computer. To create a final output image, all the tiles get stitched together into one big image that will be saved to the computer. Now it looks just like you downloaded a single part of the map!\r\n\r\n## Usage\r\nThe program has two simple commands. The first one is `init`, which creates a new project with the specified settings:\r\n```shell\r\n> mapsnap init myProject "52.3990,4.8591" "52.3393,4.9781" 15\r\n```\r\nThe second is `snap` which loads a project and snaps an image of the map as it currently is.\r\n```shell\r\n/myProject> mapsnap snap\r\n```\r\n\r\nTo see more about the commands, visit the [wiki](https://github.com/Creator13/mapsnap/wiki) on GitHub.\r\n\r\n## Libraries\r\nWhat began as a simple tool quickly became as much a quest to make myself better acquainted with the .NET framework. I settled for .NET because I wanted to program this application in C#, and I was simply curious as to what the modern .NET framework and ecosystem are capable of. \r\n\r\n### Multi-platform support\r\n.NET Core 3.0 introduced out-of-the-box native compatibility for all major platforms, which was one of the requirements I had for this tool. To be able to perform any image processing operations, I couldn\'t rely on a library that had native dependencies, as this would break the multi-platform support. I settled on [ImageSharp](https://github.com/SixLabors/ImageSharp), a popular library that aims for near-native performance without any native dependencies.\r\n\r\n### Command line interface\r\nCommand line interfaces can be tricky to write. The parsing that is required can grow very large, very quickly. I opted for using a library instead of doing all the work myself. The one I chose is the [System.CommandLine](https://github.com/dotnet/command-line-api) package, which aims to greatly simplify the process of writing command line tools. It is developed as an optional part to the official .NET framework, and is currently still in beta. I found it to be more user-friendly and at least as feature-complete as the older and more popular [CommandlineParser](https://github.com/commandlineparser/commandline) package, and I would highly recommend keeping a close eye on it!\r\n\r\n## Interested?\r\nView the source code, downloads and full usage guide on Github:\r\n\r\n[Repository on GitHub](https://github.com/Creator13/mapsnap){.external-link}{.github} [Download latest](https://github.com/Creator13/mapsnap/releases/latest){.external-link}{.download} {.link-container}',q="As a developer, it would only be fair that I develop my portfolio website myself. The website that you're currently looking at is the result. Although it is relatively simple looking, it has a lot of convenience features for easy maintenance, without reliance on servers and databases. I will explain the different features on this page.{.intro}\r\n\r\nThis site is running on Typescript and vue-cli. The pages are pre-rendered using for fast performance and static deployment.\r\n\r\n## Editing and managing projects\r\nThis is my personal portfolio website and it doesn't need complicated editing features. Fun to make for sure, but the time cost is simply not worth it. But that was not to be the end of it. Copying and pasting each new project and diving into source code for each spelling mistake I had to correct was not going to be a feasible solution either.\r\n\r\n### Framework (Vue)\r\nThe first order of business was to use a framework. Developing modern web features in plain html is getting increasingly more complex for many reasons, but the one that totally swayed me was the templating that can be done with them. I could create a basic HTML template and apply that to each project I would ever want to add in the future. I chose to use Vue simply due to my existing familiarity with it.\r\n\r\n### Markdown\r\nWith just a framework, I wasn't done yet. I needed a way to actually load the content of my pages into my site, and I didn't want to be limited by plain-text strings. Markdown was the first thing to come to mind. \r\n\r\nWith markdown I would be able to use basic formatting; no more and no less than what I needed. It is a portable format, that can be edited and viewed by with no editor needed. Meaning, I could edit projects easily from anywhere if I ever needed to. Formatting is unified through css so every page will have the same looks, while at the same time giving up nothing in terms of flexibility.\r\n\r\nI use `markdown-it` ([npm link](https://www.npmjs.com/package/markdown-it)) to render the markdown files. Apart from being a really good and feature-complete markdown renderer, it also allows me to add custom classes to files. I use this to for example display the external links at the bottom of pages. I can add custom icons to links and add display hints to images to tell if they should be full-width or centered.\r\n\r\n### File system database\r\nAs I only add a new project to this site every few months, at most three times a year, I didn't want to bother with setting up a database and dealing with external hosting. That makes the easiest solution for managing the projects using a simple file system database. A json array keeps track of the projects and their metadata (such as the titles, thumbnail/splash images, or dates), while the markdown files are retrieved by plainly importing them into the code.\r\n\r\n### Flexibility and scalability\r\nUsing a file system database that requires some manual work to use isn't the most flexible solution out there. But it is very easy and very cheap to manage. Most importantly though, the system is scalable. If I decided to use a dedicated database one day, it would only be a question of moving the current data into a database and that's it. Slap a few queries together to load the data in, and no further editing of the code would be needed. The views will take care of the rest.\r\n\r\n## Hosting & rendering\r\nThe website is entirely static. There is no user interaction with the server, and so it could be hosted statically. This is nice, because static hosting is cheap or even free! The easiest solution proved to be to upload it to GitHub pages. The process of deployment isn't entirely smooth (the current setup uses two separate repos), but a small shell script can reduce the job to a single click. \r\n\r\n### Pre-rendering\r\nA static host like GitHub pages doesn't allow any dynamic interaction between server and client. This also means I can't run my Vue app on it. There is however a solution for this called pre-rendering. This allows to render all the pages of a Vue router into html pages that can then be loaded as if it were any other webpage. The Vue app itself is compiled into a plain Javascript script that takes care of things like page transitions and other features. Pre-rendering is done using the `prerender-spa-plugin` ([npm link](https://www.npmjs.com/package/prerender-spa-plugin)).\r\n\r\nOne challenge was to render a page for each of the projects. In the original Vue app, each project is rendered onto the same page using address lookup in the vue-router. This functionality is server-side and can therefore not be used on a static website. In order for this to work, I had to add an extra step into the build process, where the list of projects is analysed and added to the paths to be rendered. This caused some typescript and javascript interop problems, which I fixed by adding a pre-build step that converts `vue.config.ts` into the required `vue.config.js` file.\r\n\r\n[Source code](https://github.com/Creator13/cvanbattum.com){.external-link}{.github} {.link-container}",H="To expand the possibilities and tools environment designers have at their disposal, we could possibly make use of generative neural networks. I was curious to see if a DCGAN could be trained to generate heightmaps that can be loaded into terrain tools in game engines, and these are the results.{.intro}\r\n\r\nI adapted a DCGAN written in PyTorch that I found on [github](https://github.com/Natsu6767/DCGAN-PyTorch) as the foundational neural net. It needed to be changed to work on single-channel grayscale images.\r\n\r\n## Data\r\nFor the input data, I started with a PNG heightmap of the entire earth, provided to us for free by NASA. My algorithm was made for 64x64px images, which also happens to be a nice size to test the feasibility of the project. Training will take much longer with larger images. To get the most out of the input file, the image can be cut up with a rolling window technique, resulting in some overlap in the images. This is no problem for the DCGAN, as it would only get better at learning.\r\n\r\n![](/project_content/heightmap-gen/earth.jpg)\r\n\r\nAfter filtering out bad data like even-colored tiles or areas stretched out by the map projection, I ended up with 14,645 unique images. These could again be flipped and rotated several different ways, to end up at a total of 117,160 frames.\r\n\r\n## Results\r\nI trained the DCGAN for 15 epochs, in about 7 hours. The resulting heightmaps look quite a bit like actual landscapes:\r\n\r\n![](/project_content/heightmap-gen/imgen4.jpg)\r\n\r\nThe images of 64px are too small to be used in terrains directly, as they contain too little detail to form recognizable landscape features. They could however be used as a more realistic base for terrain generation, compared to for example Perlin noise. The following shows a heightmap 64px loaded into Unity:\r\n\r\n![](/project_content/heightmap-gen/heightmap-unity.jpg)\r\n\r\n[Code on Github](https://github.com/Creator13/HeightmapGen){.external-link}{.github} {.link-container}",L="A small clone of the classic Lunar Lander arcade game, built in C++ with the SDL2 library, made for the linear algebra course at the Uppsala University Game Design program.{.intro}\r\n\r\nThe goal for this project was to create a solidly built game, that was still manageable to create in just two weeks. I challenged myself to implement some fancier features at the cost of gameplay, such as an animated flame and simulated physics.\r\n\r\n## Not-really-an-engine\r\n\r\nCreating an engine for a small game like this makes absolutely no sense. There is no need for much object management, with just a single object in the world. However, that didn't withold me from implementing some abstractions that would make the code cleaner and better separated.\r\n\r\nTo this end, I separated input reading and time management to their own separate modules. I created the lander as a separate object, responsible for its own drawing and update logic. Same for the ground, but since this is not a user-interactable object, it ended up as simply a wrapper around a draw function.\r\n\r\nThe Game itself is still responsible for thing that would otherwise go into complicated systems, like collision, physics, and win conditions.\r\n\r\n### Collision\r\nCollision detection is extremely simple. However, an AABB model was not enough, because the main mechanic of the game is rotation. The solution I came up with is to have two collision points that are checked against intersecting with the ground. The two outer points of the legs are perfect for this. Since the legs extend slightly, it is always guaranteed that one of them is the lowest point on the lander. \r\n\r\nIn the current implementation, only the altitude of these points is set and I did not implement collision with a complexly shaped ground.\r\n\r\n[Source](https://github.com/Creator13/lunar-lander){.external-link}{.github} {.link-container}",B="In this challenging grid-based stealth game, your task is to guide our character Dan out of a hostile, toxic office environment and keep him out of sight from a series of patrolling guards.{.intro}\r\n\r\nThis game is the result of an eight-week-long vertical slice project at the Game Design faculty of Uppsala University. Our focus was to deliver a polished experience in a short time span, while simulating and experimenting with a professional working environment. We presented *The Social Grip* at Gotland Game Conference in June 2023, where it received two nominations for Best Level Design and Best Art Design.\r\n\r\n![GGC 2023 Nominations](/project_content/social-grip/nominations.jpg){.no-shadow}\r\n\r\n## Game architecture\r\n\r\nAs the lead programmer on this project, I was responsible for managing the software architecture. There were several challenges we faced during the development, not the least of which was time. Many decisions had to be made to prioritize getting things done fast, over doing them properly. \r\n\r\n### Grid-based game\r\n\r\nThe basis of the game is a 2D-grid upon which our characters move. My earlier experience building grid-based games came in helpful here, as I was able to reuse much of my A* code, as well as avoid pitfalls I made during earlier projects. \r\n\r\nThe biggest issue with grid-based games is deciding how to store data about each cell in your grid. For earlier projects I had been using the ostensibly faster, but more cumbersome way of using two-dimensional arrays to store references to my objects. For this project, I decided to reference objects through dictionaries, indexed by structs of x-y coordinates. Since these structs are built into Unity, using them made development fast and convenient. The drawback was that lookup functions started to make a serious dent in performance during pathfinding and similarly heavy functions.\r\n\r\n![grid.jpg](/project_content%2Fsocial-grip/grid.jpg)\r\n\r\n### Grid performance\r\n\r\nPerhaps the greatest technical challenge during this project was managing the performance of the game. The grids of levels were quite big from the start, and this caused rendering to be slow. The initial, naive approach involved each tile object being rendered separately. This was not a viable long-term solution, but because of the strict time constraints I was not able to program a proper solution. We needed a way to modify tile properties for each individual tile (such as whether it's passable), a way to color the tiles in a checker pattern to communicate the grid to the player, but then for performance, we needed to get rid of the concept of individual tiles entirely. \r\n\r\nThe fastest solution I was able to come up with, was to generate a single mesh spanning the entire grid. Using some previous mesh generation code, and due to the simple geometric nature of a flat plane, this was up and running in no time at all. The meshes are generated during development time and baked into the game as static mesh assets. By modifying the UV-coordinates, we were able to use a single four-by-four tile texture for the entire floor. This solution fixed most of our performance issues.\r\n\r\n![floormesh.png](/project_content/social-grip/floormesh.png){.auto-width}\r\n\r\n### A* pathfinding & performance\r\n\r\nAll movement on the grid is dictated by A* pathfinding. At the end of the project, this was the part of the codebase that still caused most of our performance issues. Possible ideas for future improvements are caching of paths and intermediate grids, pooling of collection objects to improve the _many_ memory allocations that happen during frames, and optimizing the different pathfinding functions themselves.\r\n\r\n## Team streamlining\r\n\r\nThis project was made during an eight-week-long course. Including the startup time and final week of presentations, that left us with just a little over six weeks to make a game. Making sure that everyone could work as independently and freely as possible was critical to our success. I ended up making several small tools to help my teammates with the development process.\r\n\r\n### Grid generation\r\nTo allow our level designer to prototype different levels easily, the grids can be generated and re-generated easily. It allows modifying the size of the grid and re-generating the floor meshes during changes. \r\n\r\n![generator.png](/project_content/social-grip/generator.png){.auto-width}\r\n\r\n### Dynamic level selection\r\nScene management was one of the most critical things to get right. I wanted our level designer to be able to build levels long before features they relied on were complete. As soon as we started testing, we wanted to be able to quickly create different levels to be able to test certain features separately. Having to manage the scenes in the builds manually quickly became a hassle, and I figured it could easily be automated.\r\n\r\nBy combining a package for [Scene References](https://bitbucket.org/alfish/com.unity_x.modules.sceneref/src/master/) and [Hextant Utilities' Settings Provider package](https://github.com/hextantstudios/com.hextantstudios.utilities), I spent a few hours on creating a settings menu in which my team could easily manage the levels to be included in a build. These levels are then dynamically loaded into the build, and added to the main menu during runtime. \r\n\r\n![scenes.png](/project_content/social-grip/scenes.png){.auto-width}\r\n\r\n## The team: **Chonk Cat Productions**\r\n\r\nI had the pleasure of working with this lovely team of talented people for the duration of this project:\r\n\r\n- **[Rens van Eldijk](https://rance.nl/)**: Product Owner, level design  \r\n- **[Dylan Kühl](https://kuehldy.itch.io/)**: Producer, UI design\r\n- **[Anna Hatzl](https://hawtsheep.artstation.com/resume)**: Art director, 2D & 3D art\r\n- **[Ottilia Hedberg](https://ottilia.itch.io/)**: Character art, 2D & 3D art\r\n- **[Ilias Keramidas](https://www.linkedin.com/in/ilias-keramidas-254782258/)**: Programming, VFX\r\n- **[Disa Nordström](https://www.linkedin.com/in/disa-nordstr%C3%B6m-82862b278/)**: Quality assurance, social media\r\n- **[Leo Wognum](https://www.linkedin.com/in/leo-wognum-339425250/)**: Music & sound design\r\n- Casper van Battum: Lead programmer\r\n\r\n[Itch.io](https://chonk-cats-productions.itch.io/the-social-grip){.external-link}{.game} {.link-container}";const V={fluffy:P,mimont:A,"connect-for-coffee":S,"treasure-chest":D,"game-of-life":O,"tree-generator":M,"buildings-osm":G,graphprog:U,"cliffside-cave":F,"basic-networking":N,"the-journalist":E,mapsnap:W,portfolio:q,"heightmap-gen":H,"lunar-lander":L,"social-grip":B};function z(e){var t;const n=C.find(t=>t.slug===e);return void 0===n?{}:(n.content=null!==(t=V[n.slug])&&void 0!==t?t:"**If you see this, something went wrong...**",n)}function R(e){return C.some(t=>t.slug===e)}function Y(){return C.filter(e=>!e.hidden)}function $(e){var t,n;return null!==(n=null===(t=C.find(t=>t.slug===e))||void 0===t?void 0:t.name)&&void 0!==n?n:""}var J=n("d4cd"),K=n.n(J),Q=n("364f"),X=n.n(Q);const Z=K()("default",{linkify:!0,typographer:!0,html:!0});Z.use(X.a);const ee=Z.renderer.rules.link_open||function(e,t,n,a,r){return r.renderToken(e,t,n)};Z.renderer.rules.link_open=function(e,t,n,a,r){const o=e[t].attrIndex("target");return o<0&&e[t].attrPush(["target","_blank"]),ee(e,t,n,a,r)};var te=Z,ne=a["a"].extend({name:"ProjectView",props:{projectSlug:{type:String,required:!0}},computed:{renderedContent(){return te.render(this.project.content)},project(){return z(this.projectSlug)}}}),ae=ne,re=(n("38c2"),n("2f74"),Object(h["a"])(ae,x,_,!1,null,"eb13a198",null)),oe=re.exports,ie=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"overview"},[n("masonry",{attrs:{cols:{default:3,1279:2,800:1},gutter:30}},e._l(e.projects,(function(e){return n("PortfolioItem",{key:e.name,staticClass:"portfolio-item",attrs:{"project-object":e}})})),1)],1)},se=[],le=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"card"},[n("router-link",{attrs:{to:{name:"project-view",params:{projectSlug:e.projectObject.slug}}}},[e.projectObject.isFavorite?n("font-awesome-icon",{staticClass:"favorite-icon",attrs:{icon:"crown",title:"Personal favorite"}}):e._e(),n("div",{staticClass:"card-overlay"},[n("img",{staticClass:"card-img",attrs:{src:e.projectObject.thumbnailUri,alt:e.projectObject.slug}})]),n("div",{staticClass:"card-text fadeIn-bottom"},[n("h3",[e._v(e._s(e.projectObject.name)+" ("+e._s(e.projectObject.year)+")")]),n("h6",[n("span",[e._l(e.projectObject.techs,(function(t,n){return[e._v(" "+e._s(t)),n<e.projectObject.techs.length-1?[e._v(" • ")]:e._e()]}))],2)]),e.projectObject.shortDescription?n("p",[e._v(e._s(e.projectObject.shortDescription))]):e._e()])],1)],1)},ce=[],he=a["a"].extend({name:"PortfolioItem",props:{projectObject:{type:Object,required:!0}}}),pe=he,de=(n("c904"),Object(h["a"])(pe,le,ce,!1,null,"c873669a",null)),ue=de.exports,me=a["a"].extend({components:{PortfolioItem:ue},computed:{projects(){return Y()}}}),ge=me,fe=(n("9852"),Object(h["a"])(ge,ie,se,!1,null,"912ece3c",null)),we=fe.exports,be=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[e._v("photos")])},ye=[],ve=a["a"].extend({name:"PhotographyOverview"}),ke=ve,je=Object(h["a"])(ke,be,ye,!1,null,"6d35eaa4",null),Ie=je.exports,xe=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},_e=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("p",[e._v("Would you like to send me a ")])])}],Te=a["a"].extend({name:"ContactView"}),Ce=Te,Pe=Object(h["a"])(Ce,xe,_e,!1,null,"aa0434ae",null),Ae=Pe.exports,Se=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},De=[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",[e._v("This page doesn't exist!")])])}],Oe=a["a"].extend({name:"NotFoundView"}),Ue=Oe,Fe=(n("cf47"),Object(h["a"])(Ue,Se,De,!1,null,"4abaa9a7",null)),Me=Fe.exports;function Ge(e){return e?"Casper van Battum - "+e:"Casper van Battum"}a["a"].use(w["a"]);const Ne=[{path:"/",name:"home",component:I,meta:{pageTitle:""}},{path:"/projects",name:"project-overview",component:we,meta:{pageTitle:"Projects"}},{path:"/projects/:projectSlug",name:"project-view",component:oe,props:!0,beforeEnter(e,t,n){R(e.params.projectSlug)?(document.title=Ge($(e.params.projectSlug)),n()):Ee.replace({name:"not-found"}).then(()=>n())}},{path:"/photos",name:"photos",component:Ie,meta:{pageTitle:"Photography"}},{path:"/contact",name:"contact",component:Ae,meta:{pageTitle:"Contact"}},{path:"/404",name:"not-found",component:Me,meta:{pageTitle:"404"}},{path:"*",redirect:"404"}],Ee=new w["a"]({mode:"history",base:"/",routes:Ne,scrollBehavior(e,t,n){return n?{x:n.x,y:n.y,behavior:"smooth"}:e.hash?{selector:e.hash,behavior:"smooth"}:{x:0,y:0,behavior:"smooth"}}});Ee.beforeEach((e,t,n)=>{document.title=Ge(e.meta.pageTitle),n()});var We=Ee,qe=n("ecee"),He=n("b702"),Le=n("c074"),Be=n("ad3d"),Ve=n("f2d1"),ze=n("95ae");a["a"].config.productionTip=!1,a["a"].use(ze["a"]),qe["c"].add(He["a"]),qe["c"].add(Le["a"]),qe["c"].add(Ve["b"]),qe["c"].add(Ve["c"]),qe["c"].add(Ve["d"]),qe["c"].add(Ve["a"]),a["a"].component("font-awesome-icon",Be["a"]),new a["a"]({router:We,render:e=>e(f),mounted:()=>document.dispatchEvent(new Event("x-app-rendered"))}).$mount("#app")},cf47:function(e,t,n){"use strict";n("2186")},d796:function(e,t,n){},f257:function(e,t,n){}});
//# sourceMappingURL=app.148d6d6c.js.map